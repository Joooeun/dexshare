-- =====================================================
-- Windmill 데이터베이스 스키마
-- =====================================================
-- DB2 연결 후 실행
-- db2 connect to SAMPLE user db2inst1 using password

-- =====================================================
-- 사용자 관리
-- =====================================================

CREATE TABLE USERS (
    USER_ID VARCHAR(50) NOT NULL PRIMARY KEY,
    USER_NAME VARCHAR(100) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    TEMP_PASSWORD VARCHAR(255),
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    IP_RESTRICTION VARCHAR(500),
    LAST_LOGIN_TIMESTAMP TIMESTAMP,
    LOGIN_FAIL_COUNT INTEGER DEFAULT 0,
    PASSWORD_CHANGE_DATE DATE,
    CREATED_BY VARCHAR(50),
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    MODIFIED_BY VARCHAR(50),
    MODIFIED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE USER_GROUPS (
    GROUP_ID VARCHAR(50) NOT NULL PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL,
    GROUP_DESCRIPTION VARCHAR(500),
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    CREATED_BY VARCHAR(50),
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    MODIFIED_BY VARCHAR(50),
    MODIFIED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE USER_GROUP_MAPPING (
    USER_ID VARCHAR(50) NOT NULL,
    GROUP_ID VARCHAR(50) NOT NULL,
    ASSIGNED_BY VARCHAR(50),
    ASSIGNED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    PRIMARY KEY (USER_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (GROUP_ID) REFERENCES USER_GROUPS(GROUP_ID) ON DELETE CASCADE
);

-- =====================================================
-- 연결 정보
-- =====================================================

CREATE TABLE DATABASE_CONNECTION (
    CONNECTION_ID VARCHAR(100) NOT NULL PRIMARY KEY,
    DB_TYPE VARCHAR(20) NOT NULL,
    HOST_IP VARCHAR(45) NOT NULL,
    PORT INTEGER,
    DATABASE_NAME VARCHAR(100),
    USERNAME VARCHAR(100) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    JDBC_DRIVER_FILE VARCHAR(200),
    TEST_SQL VARCHAR(1000),
    CONNECTION_POOL_SETTINGS CLOB,
    CONNECTION_TIMEOUT INTEGER DEFAULT 15,
    QUERY_TIMEOUT INTEGER DEFAULT 600,
    MAX_POOL_SIZE INTEGER DEFAULT 10,
    MIN_POOL_SIZE INTEGER DEFAULT 2,
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    MONITORING_ENABLED BOOLEAN DEFAULT FALSE,
    MONITORING_INTERVAL INTEGER DEFAULT 5,
    CREATED_BY VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    MODIFIED_BY VARCHAR(50),
    MODIFIED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE SFTP_CONNECTION (
    SFTP_CONNECTION_ID VARCHAR(100) NOT NULL PRIMARY KEY,
    HOST_IP VARCHAR(45) NOT NULL,
    PORT INTEGER DEFAULT 22,
    USERNAME VARCHAR(100) NOT NULL,
    PASSWORD VARCHAR(255),
    PRIVATE_KEY_PATH VARCHAR(500),
    REMOTE_PATH VARCHAR(500),
    CONNECTION_TIMEOUT INTEGER DEFAULT 30,
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    CREATED_BY VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    MODIFIED_BY VARCHAR(50),
    MODIFIED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP
);

-- =====================================================
-- SQL 템플릿
-- =====================================================

CREATE TABLE SQL_TEMPLATE_CATEGORY (
    CATEGORY_ID VARCHAR(50) NOT NULL PRIMARY KEY,
    CATEGORY_NAME VARCHAR(100) NOT NULL,
    CATEGORY_DESCRIPTION VARCHAR(500),
    CATEGORY_ORDER INTEGER DEFAULT 0,
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    CREATED_BY VARCHAR(50),
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    MODIFIED_BY VARCHAR(50),
    MODIFIED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE SQL_TEMPLATE (
    TEMPLATE_ID VARCHAR(100) NOT NULL PRIMARY KEY,
    TEMPLATE_NAME VARCHAR(200) NOT NULL,
    TEMPLATE_DESC VARCHAR(500),
    SQL_CONTENT CLOB NOT NULL,
    ACCESSIBLE_CONNECTION_IDS VARCHAR(500),
    CHART_MAPPING VARCHAR(50),
    VERSION INTEGER DEFAULT 1,
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    EXECUTION_LIMIT INTEGER DEFAULT 0,
    REFRESH_TIMEOUT INTEGER DEFAULT 0,
    NEWLINE BOOLEAN DEFAULT TRUE,
    AUDIT BOOLEAN DEFAULT FALSE,
    CREATED_BY VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    MODIFIED_BY VARCHAR(50),
    MODIFIED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE SQL_TEMPLATE_PARAMETER (
    PARAMETER_ID BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TEMPLATE_ID VARCHAR(100) NOT NULL,
    PARAMETER_NAME VARCHAR(100) NOT NULL,
    PARAMETER_TYPE VARCHAR(20) DEFAULT 'STRING',
    PARAMETER_ORDER INTEGER DEFAULT 0,
    IS_REQUIRED BOOLEAN DEFAULT FALSE,
    DEFAULT_VALUE VARCHAR(500),
    IS_READONLY BOOLEAN DEFAULT FALSE,
    IS_HIDDEN BOOLEAN DEFAULT FALSE,
    IS_DISABLED BOOLEAN DEFAULT FALSE,
    DESCRIPTION VARCHAR(500),
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    MODIFIED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    FOREIGN KEY (TEMPLATE_ID) REFERENCES SQL_TEMPLATE(TEMPLATE_ID) ON DELETE CASCADE
);

CREATE TABLE SQL_TEMPLATE_SHORTCUT (
    SHORTCUT_ID BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    SOURCE_TEMPLATE_ID VARCHAR(100) NOT NULL,
    TARGET_TEMPLATE_ID VARCHAR(100) NOT NULL,
    SHORTCUT_KEY VARCHAR(50) NOT NULL,
    SHORTCUT_NAME VARCHAR(100) NOT NULL,
    SHORTCUT_DESCRIPTION VARCHAR(500),
    SOURCE_COLUMN_INDEXES VARCHAR(200),
    AUTO_EXECUTE BOOLEAN DEFAULT TRUE,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    MODIFIED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    FOREIGN KEY (SOURCE_TEMPLATE_ID) REFERENCES SQL_TEMPLATE(TEMPLATE_ID) ON DELETE CASCADE,
    FOREIGN KEY (TARGET_TEMPLATE_ID) REFERENCES SQL_TEMPLATE(TEMPLATE_ID) ON DELETE CASCADE
);

CREATE TABLE SQL_TEMPLATE_CATEGORY_MAPPING (
    TEMPLATE_ID VARCHAR(100) NOT NULL,
    CATEGORY_ID VARCHAR(50) NOT NULL,
    MAPPING_ORDER INTEGER DEFAULT 0,
    CREATED_BY VARCHAR(50),
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    PRIMARY KEY (TEMPLATE_ID, CATEGORY_ID),
    FOREIGN KEY (TEMPLATE_ID) REFERENCES SQL_TEMPLATE(TEMPLATE_ID) ON DELETE CASCADE,
    FOREIGN KEY (CATEGORY_ID) REFERENCES SQL_TEMPLATE_CATEGORY(CATEGORY_ID) ON DELETE CASCADE
);

CREATE TABLE SQL_CONTENT (
    CONTENT_ID VARCHAR(50) NOT NULL PRIMARY KEY,
    TEMPLATE_ID VARCHAR(100) NOT NULL,
    DB_TYPE VARCHAR(20) NOT NULL,
    SQL_CONTENT CLOB NOT NULL,
    VERSION INTEGER DEFAULT 1,
    CREATED_BY VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    MODIFIED_BY VARCHAR(50),
    MODIFIED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    FOREIGN KEY (TEMPLATE_ID) REFERENCES SQL_TEMPLATE(TEMPLATE_ID) ON DELETE CASCADE
);

CREATE TABLE GROUP_CATEGORY_MAPPING (
    GROUP_ID VARCHAR(50) NOT NULL,
    CATEGORY_ID VARCHAR(50) NOT NULL,
    GRANTED_BY VARCHAR(50),
    GRANTED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    PRIMARY KEY (GROUP_ID, CATEGORY_ID),
    FOREIGN KEY (GROUP_ID) REFERENCES USER_GROUPS(GROUP_ID) ON DELETE CASCADE,
    FOREIGN KEY (CATEGORY_ID) REFERENCES SQL_TEMPLATE_CATEGORY(CATEGORY_ID) ON DELETE CASCADE
);

CREATE TABLE GROUP_CONNECTION_MAPPING (
    GROUP_ID VARCHAR(50) NOT NULL,
    CONNECTION_ID VARCHAR(100) NOT NULL,
    GRANTED_BY VARCHAR(50),
    GRANTED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    PRIMARY KEY (GROUP_ID, CONNECTION_ID),
    FOREIGN KEY (GROUP_ID) REFERENCES USER_GROUPS(GROUP_ID) ON DELETE CASCADE
);

-- =====================================================
-- 로그 및 감사
-- =====================================================

CREATE TABLE AUDIT_LOGS (
    LOG_ID BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID VARCHAR(50),
    ACTION_TYPE VARCHAR(50) NOT NULL,
    RESOURCE_TYPE VARCHAR(50),
    RESOURCE_ID VARCHAR(100),
    OLD_VALUE CLOB,
    NEW_VALUE CLOB,
    IP_ADDRESS VARCHAR(45),
    USER_AGENT VARCHAR(500),
    SESSION_ID VARCHAR(100),
    EXECUTION_TIME INTEGER,
    STATUS VARCHAR(20) DEFAULT 'SUCCESS',
    ERROR_MESSAGE VARCHAR(1000),
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP
);

CREATE TABLE USER_SESSIONS (
    SESSION_ID VARCHAR(100) NOT NULL PRIMARY KEY,
    USER_ID VARCHAR(50) NOT NULL,
    IP_ADDRESS VARCHAR(45),
    USER_AGENT VARCHAR(500),
    LOGIN_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    LAST_ACCESS_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    SESSION_DATA CLOB,
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

CREATE TABLE DEXLOG (
    LOG_ID BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID VARCHAR(50),
    ACTION_TYPE VARCHAR(50) NOT NULL,
    RESOURCE_TYPE VARCHAR(50),
    RESOURCE_ID VARCHAR(100),
    DETAIL_MESSAGE CLOB,
    IP_ADDRESS VARCHAR(45),
    USER_AGENT VARCHAR(500),
    SESSION_ID VARCHAR(100),
    EXECUTION_TIME INTEGER,
    STATUS VARCHAR(20) DEFAULT 'SUCCESS',
    ERROR_MESSAGE VARCHAR(1000),
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP
);


-- =====================================================
-- 인덱스
-- =====================================================

-- 로그 조회용 인덱스
CREATE INDEX IDX_AUDIT_LOGS_TIMESTAMP ON AUDIT_LOGS(CREATED_TIMESTAMP);
CREATE INDEX IDX_DEXLOG_TIMESTAMP ON DEXLOG(CREATED_TIMESTAMP);
CREATE INDEX IDX_USER_SESSIONS_LAST_ACCESS ON USER_SESSIONS(LAST_ACCESS_TIMESTAMP);

-- 사용자 관리 인덱스
CREATE INDEX IDX_USERS_STATUS ON USERS(STATUS);
CREATE INDEX IDX_USERS_LAST_LOGIN ON USERS(LAST_LOGIN_TIMESTAMP);

-- 연결 정보 인덱스
CREATE INDEX IDX_DATABASE_CONNECTION_STATUS ON DATABASE_CONNECTION(STATUS);

-- SQL 템플릿 인덱스
CREATE INDEX IDX_SQL_TEMPLATE_STATUS ON SQL_TEMPLATE(STATUS);
CREATE INDEX IDX_SQL_TEMPLATE_CHART_MAPPING ON SQL_TEMPLATE(CHART_MAPPING);

-- =====================================================
-- 기본 데이터
-- =====================================================

-- 카테고리
INSERT INTO SQL_TEMPLATE_CATEGORY (CATEGORY_ID, CATEGORY_NAME, CATEGORY_DESCRIPTION, CATEGORY_ORDER, STATUS, CREATED_BY) VALUES
('DASHBOARD', '대시보드', '대시보드 관련 SQL 템플릿', 1, 'ACTIVE', 'SYSTEM'),
('REPORT', '리포트', '리포트 관련 SQL 템플릿', 2, 'ACTIVE', 'SYSTEM'),
('MONITORING', '모니터링', '시스템 모니터링 관련 SQL 템플릿', 3, 'ACTIVE', 'SYSTEM'),
('ADMIN', '관리', '시스템 관리 관련 SQL 템플릿', 4, 'ACTIVE', 'SYSTEM'),
('UTILITY', '유틸리티', '유틸리티 관련 SQL 템플릿', 5, 'ACTIVE', 'SYSTEM');

-- 차트용 템플릿
INSERT INTO SQL_TEMPLATE (TEMPLATE_ID, TEMPLATE_NAME, TEMPLATE_DESC, SQL_CONTENT, ACCESSIBLE_CONNECTION_IDS, CHART_MAPPING, VERSION, STATUS, EXECUTION_LIMIT, REFRESH_TIMEOUT, NEWLINE, CREATED_BY) VALUES
('APPL_COUNT_CHART', 'APPL_COUNT 차트', '애플리케이션 수 모니터링 차트용 SQL', 'SELECT CASE WHEN APPL_COUNT < 50 THEN ''정상'' WHEN APPL_COUNT < 100 THEN ''주의'' ELSE ''위험'' END AS STATUS, COUNT(*) AS COUNT FROM (SELECT APPL_COUNT FROM SYSIBMADM.SNAPAPPL WHERE APPL_COUNT > 0) T GROUP BY CASE WHEN APPL_COUNT < 50 THEN ''정상'' WHEN APPL_COUNT < 100 THEN ''주의'' ELSE ''위험'' END', 'test_db', 'APPL_COUNT', 1, 'ACTIVE', 1000, 10, TRUE, 'SYSTEM'),
('LOCK_WAIT_COUNT_CHART', 'LOCK_WAIT_COUNT 차트', '락 대기 수 모니터링 차트용 SQL', 'SELECT CASE WHEN LOCK_WAIT_COUNT = 0 THEN ''정상'' WHEN LOCK_WAIT_COUNT < 10 THEN ''주의'' ELSE ''위험'' END AS STATUS, COUNT(*) AS COUNT FROM (SELECT LOCK_WAIT_COUNT FROM SYSIBMADM.SNAPLOCK WHERE LOCK_WAIT_COUNT >= 0) T GROUP BY CASE WHEN LOCK_WAIT_COUNT = 0 THEN ''정상'' WHEN LOCK_WAIT_COUNT < 10 THEN ''주의'' ELSE ''위험'' END', 'test_db', 'LOCK_WAIT_COUNT', 1, 'ACTIVE', 1000, 10, TRUE, 'SYSTEM'),
('ACTIVE_LOG_CHART', 'ACTIVE_LOG 차트', '활성 로그 모니터링 차트용 SQL', 'SELECT CASE WHEN ACTIVE_LOG_COUNT < 100 THEN ''정상'' WHEN ACTIVE_LOG_COUNT < 500 THEN ''주의'' ELSE ''위험'' END AS STATUS, COUNT(*) AS COUNT FROM (SELECT COUNT(*) AS ACTIVE_LOG_COUNT FROM SYSIBMADM.SNAPLOG WHERE LOG_STATUS = ''ACTIVE'') T GROUP BY CASE WHEN ACTIVE_LOG_COUNT < 100 THEN ''정상'' WHEN ACTIVE_LOG_COUNT < 500 THEN ''주의'' ELSE ''위험'' END', 'test_db', 'ACTIVE_LOG', 1, 'ACTIVE', 1000, 10, TRUE, 'SYSTEM'),
('FILESYSTEM_CHART', 'FILESYSTEM 차트', '파일시스템 사용량 모니터링 차트용 SQL', 'SELECT CASE WHEN USAGE_PERCENT < 70 THEN ''정상'' WHEN USAGE_PERCENT < 90 THEN ''주의'' ELSE ''위험'' END AS STATUS, COUNT(*) AS COUNT FROM (SELECT (USED_SPACE * 100.0 / TOTAL_SPACE) AS USAGE_PERCENT FROM SYSIBMADM.SNAPFILESYSTEM) T GROUP BY CASE WHEN USAGE_PERCENT < 70 THEN ''정상'' WHEN USAGE_PERCENT < 90 THEN ''주의'' ELSE ''위험'' END', 'test_db', 'FILESYSTEM', 1, 'ACTIVE', 1000, 10, TRUE, 'SYSTEM');

-- 차트 매핑
INSERT INTO SQL_TEMPLATE_CATEGORY_MAPPING (TEMPLATE_ID, CATEGORY_ID, MAPPING_ORDER, CREATED_BY) VALUES
('APPL_COUNT_CHART', 'DASHBOARD', 1, 'SYSTEM'),
('LOCK_WAIT_COUNT_CHART', 'DASHBOARD', 2, 'SYSTEM'),
('ACTIVE_LOG_CHART', 'DASHBOARD', 3, 'SYSTEM'),
('FILESYSTEM_CHART', 'DASHBOARD', 4, 'SYSTEM');

-- 사용자 그룹
INSERT INTO USER_GROUPS (GROUP_ID, GROUP_NAME, GROUP_DESCRIPTION, STATUS, CREATED_BY) VALUES 
('ADMIN_GROUP', '관리자 그룹', '시스템 관리자 그룹', 'ACTIVE', 'SYSTEM'),
('USER_GROUP', '일반 사용자 그룹', '일반 사용자 그룹', 'ACTIVE', 'SYSTEM'),
('VIEWER_GROUP', '조회 전용 그룹', '조회만 가능한 사용자 그룹', 'ACTIVE', 'SYSTEM');

-- 관리자 계정
INSERT INTO USERS (USER_ID, USER_NAME, PASSWORD, STATUS, CREATED_BY) VALUES ('admin', '관리자', '1e0ce442a8e20cc64b534494d7aea44e', 'ACTIVE', 'SYSTEM');
INSERT INTO USER_GROUP_MAPPING (USER_ID, GROUP_ID, ASSIGNED_BY) VALUES ('admin', 'ADMIN_GROUP', 'SYSTEM');

-- 테스트 사용자
INSERT INTO USERS (USER_ID, USER_NAME, PASSWORD, STATUS, CREATED_BY) VALUES ('testuser', '테스트 사용자', '1e0ce442a8e20cc64b534494d7aea44e', 'ACTIVE', 'SYSTEM');
INSERT INTO USER_GROUP_MAPPING (USER_ID, GROUP_ID, ASSIGNED_BY) VALUES ('testuser', 'USER_GROUP', 'SYSTEM');

-- 테스트 연결
INSERT INTO DATABASE_CONNECTION (CONNECTION_ID,DB_TYPE,HOST_IP,PORT,DATABASE_NAME,USERNAME,PASSWORD,JDBC_DRIVER_FILE,TEST_SQL,CONNECTION_TIMEOUT,QUERY_TIMEOUT,MAX_POOL_SIZE,MIN_POOL_SIZE,STATUS,MONITORING_ENABLED,MONITORING_INTERVAL,CREATED_BY) VALUES
('test_db','DB2','192.168.219.116',50000,'SAMPLE','db2inst1','1234','jcc-11.5.0.0.jar','SELECT 1 FROM SYSIBM.SYSDUMMY1',15,600,10,2,'ACTIVE',FALSE,10,'SYSTEM');

-- 테스트 SQL
INSERT INTO SQL_TEMPLATE (TEMPLATE_ID, TEMPLATE_NAME, SQL_CONTENT, ACCESSIBLE_CONNECTION_IDS, CREATED_BY) VALUES
('test_sql', '테스트 SQL', 'SELECT 1 FROM SYSIBM.SYSDUMMY1', 'test_db', 'SYSTEM');

INSERT INTO SQL_CONTENT (CONTENT_ID, TEMPLATE_ID, DB_TYPE, SQL_CONTENT, VERSION, CREATED_BY) VALUES
('CONTENT_test_sql_db2', 'test_sql', 'DB2', 'SELECT 1 FROM SYSIBM.SYSDUMMY1', 1, 'SYSTEM'),
('CONTENT_test_sql_oracle', 'test_sql', 'ORACLE', 'SELECT 1 FROM DUAL', 1, 'SYSTEM');

INSERT INTO SQL_TEMPLATE_CATEGORY_MAPPING (TEMPLATE_ID, CATEGORY_ID, MAPPING_ORDER, CREATED_BY) VALUES
('test_sql', 'UTILITY', 1, 'SYSTEM');

INSERT INTO SQL_TEMPLATE_PARAMETER (TEMPLATE_ID, PARAMETER_NAME, PARAMETER_TYPE, PARAMETER_ORDER, IS_REQUIRED, DESCRIPTION) VALUES
('test_sql', 'startDate', 'DATE', 1, TRUE, '시작 날짜'),
('test_sql', 'endDate', 'DATE', 2, TRUE, '종료 날짜'),
('test_sql', 'userId', 'STRING', 3, FALSE, '사용자 ID');

INSERT INTO SQL_TEMPLATE_SHORTCUT (SOURCE_TEMPLATE_ID, TARGET_TEMPLATE_ID, SHORTCUT_KEY, SHORTCUT_NAME, SOURCE_COLUMN_INDEXES, AUTO_EXECUTE) VALUES
('test_sql', 'test_sql', 'F1', '상세보기', '0,1', TRUE);

-- PostgreSQL용 차트 SQL
INSERT INTO SQL_CONTENT (CONTENT_ID, TEMPLATE_ID, DB_TYPE, SQL_CONTENT, CREATED_BY) VALUES
('APPL_COUNT_POSTGRESQL', 'APPL_COUNT_CHART', 'POSTGRESQL', 'SELECT CASE WHEN active_connections < 50 THEN ''정상'' WHEN active_connections < 100 THEN ''주의'' ELSE ''위험'' END AS STATUS, COUNT(*) AS COUNT FROM (SELECT count(*) as active_connections FROM pg_stat_activity WHERE state = ''active'') T GROUP BY CASE WHEN active_connections < 50 THEN ''정상'' WHEN active_connections < 100 THEN ''주의'' ELSE ''위험'' END', 'SYSTEM'),
('LOCK_WAIT_COUNT_POSTGRESQL', 'LOCK_WAIT_COUNT_CHART', 'POSTGRESQL', 'SELECT CASE WHEN lock_count = 0 THEN ''정상'' WHEN lock_count < 10 THEN ''주의'' ELSE ''위험'' END AS STATUS, COUNT(*) AS COUNT FROM (SELECT count(*) as lock_count FROM pg_locks WHERE NOT granted) T GROUP BY CASE WHEN lock_count = 0 THEN ''정상'' WHEN lock_count < 10 THEN ''주의'' ELSE ''위험'' END', 'SYSTEM'),
('ACTIVE_LOG_POSTGRESQL', 'ACTIVE_LOG_CHART', 'POSTGRESQL', 'SELECT CASE WHEN log_count < 100 THEN ''정상'' WHEN log_count < 500 THEN ''주의'' ELSE ''위험'' END AS STATUS, COUNT(*) AS COUNT FROM (SELECT count(*) as log_count FROM pg_stat_activity WHERE state = ''active'') T GROUP BY CASE WHEN log_count < 100 THEN ''정상'' WHEN log_count < 500 THEN ''주의'' ELSE ''위험'' END', 'SYSTEM'),
('FILESYSTEM_POSTGRESQL', 'FILESYSTEM_CHART', 'POSTGRESQL', 'SELECT CASE WHEN usage_percent < 70 THEN ''정상'' WHEN usage_percent < 90 THEN ''주의'' ELSE ''위험'' END AS STATUS, COUNT(*) AS COUNT FROM (SELECT 50 as usage_percent) T GROUP BY CASE WHEN usage_percent < 70 THEN ''정상'' WHEN usage_percent < 90 THEN ''주의'' ELSE ''위험'' END', 'SYSTEM');

-- 권한 설정
INSERT INTO GROUP_CATEGORY_MAPPING (GROUP_ID, CATEGORY_ID, GRANTED_BY) SELECT 'ADMIN_GROUP', CATEGORY_ID, 'SYSTEM' FROM SQL_TEMPLATE_CATEGORY;
INSERT INTO GROUP_CONNECTION_MAPPING (GROUP_ID, CONNECTION_ID, GRANTED_BY) SELECT 'ADMIN_GROUP', CONNECTION_ID, 'SYSTEM' FROM DATABASE_CONNECTION;


